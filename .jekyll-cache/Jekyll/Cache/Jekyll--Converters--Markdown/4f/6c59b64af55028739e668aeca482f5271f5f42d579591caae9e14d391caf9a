I"Í<p>O curso abordou sobre AsyncTask que pelo que entendi do curso, o <strong>AsyncTask</strong> executa‚Ä¶<!--more--> procedimentos assincronos, ou seja, que rodam em background. Para processamentos assincronos n√£o podemos executar na thread da UI (User Interface), ent√£o criamos esse AsyncTask que cria uma Thread que espera o resultado do acesso. Para testar meus entendimentos Criei um aplicativo que usa a api <a href="https://genderize.io">Genderize.IO</a> (ela responde se um ou mais nomes s√£o do sexo masculino ou feminino). Neste post n√£o colocarei muito c√≥digo, para ver o c√≥digo acesse o projeto no github <a href="https://github.com/rodrigoregio/NameAPIs">Projeto</a>.<br /><br /></p>

<p>Para acessar API‚Äôs primeiramente devemos adicionar permiss√£o para HttpUrlConnection no AndroidManifest.<br /><br /></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span>
<span class="s">"android.permission.INTENET"</span><span class="nt">/&gt;</span>
</code></pre></div></div>
<p><br />
O aplicativo pega nomes digitados (separados por virgula) em um TextView e tamb√©m h√° um bot√£o (ao digitar os nomes o usuario clica no bot√£o). Ao clicar no bot√£o √© chamado a fun√ß√£o verificaNomes, ela pega os nomes digitados pelo usu√°rio e quebra (split) separando por virgula, exemplo, ‚ÄúRodrigo,Jos√©‚Äù se tornar√° um array de Strings que nomeei nomesList e ter√° os valores [‚ÄúRodrigo‚Äù, ‚ÄúJos√©‚Äù]. Se a nomesList tiver um nome somente ele acessar√° a url <code class="language-plaintext highlighter-rouge">"https://api.genderize.io?name="+nomesList[0]</code>, e se tiver mais de um nome acessar√° com um for que ficar√° da seguinte forma:<br /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stringBuilder</span> <span class="o">=</span> <span class="k">new</span>
	<span class="nc">StringBuilder</span><span class="o">(</span><span class="s">"https://"</span><span class="o">+</span>
	<span class="o">+</span><span class="s">"api.genderize.io/?&amp;"</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">nome</span> <span class="o">:</span> <span class="n">nomesList</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">stringBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span>
		<span class="s">"&amp;name="</span><span class="o">+</span><span class="n">nome</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
O aplicativo funcionar√° somente online, ent√£o fiz uma fun√ß√£o para saber se o usuario est√° online. Se o usuario estiver online chamar√° uma fun√ß√£o chamada buscaDados.<br /><br /></p>

<p>Antes da fun√ß√£o buscaDados explicarei sobre a AsyncTask (at√© porque a buscaDados chamar√° a AsyncTask. Em nossa classe MainActivity mesmo criamos a classe MyTask que extende a AsyncTask, para extender devemos extender da seguinte forma extends <strong>AsyncTask&lt;String,String,String&gt;</strong>.<br /><br /></p>

<p>N√£o tinha entendido o porque da tag <strong>&lt;String,String,String&gt;</strong>, mas pesquisando mais sobre ela, encontrei que ela recebe tipo tr√™s ‚Äúpar√¢metros‚Äù. O primeiro String √© um par√¢metro (que usamos para passar a url onde ela pega os dados. O segundo String √© o progresso (pode-se substituir o String por um int e exibir√° a porcentagem do procedimento como quando fazemos um download. E o terceiro String √© o resultado, o que ele pegou.<br /><br /></p>

<p>Fazendo isto n√≥s teremos que sobrescrever ao menos um m√©todo, o <strong>doInBackground()</strong>. Nele criamos uma String que receber√° o conte√∫do da api. Criamos uma classe chamada <strong>HttpManager</strong>.<br /><br /></p>

<p>Essa HttpManager √© o que realiza a conex√£o, criamos um metodo chamado <strong>getDados(String uri)</strong> que tem como parametro a url, e ela trabalha como uma conex√£o com banco de dados. Criamos uma URL com a uri que passamos como argumento. Criamos uma conex√£o com HttpUrlConnection abrimos a url fazendo um casting para o HttpUrlConnection. Como disse anteriormente ela trabalha como um banco de dados, para mais detalhes acesse o projeto no Github <a href="https://github.com/rodrigoregio/NameAPIs/blob/master/app/src/main/java/top/rregio/nameapis/HttpManager.java">classe HttpManager</a>.<br /><br /></p>

<p>Ap√≥s retornar ao doInBackground retornamos a string conseguida na api. Na classe do AsyncTask tamb√©m sobrescrevi outros dois m√©todos o <strong>onPreExecute</strong> (nele coloquei para que mostre somente um progressbar (item com a anima√ß√£o de que est√° carregando) e outro chamado <strong>onPostExecute</strong> (fiz com que ele desabilite a anima√ß√£o do progressbar e chame um metodo chamado atualizarView(String s) este m√©todo somente coloca a string retornada no doInBackground em um TextView.<br /><br /></p>

<p>E por enquanto √© somente estes passos que meu aplicativo faz, e √© isto que entendi o sobre acesso a API‚Äôs com Android.</p>

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://rregio-top.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
:ET