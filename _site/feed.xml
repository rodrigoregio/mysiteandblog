<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-10-18T11:56:26-03:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Redes, componentes, protocolos e serviços</title><link href="http://localhost:4000/2020/10/10/Web_fundamentos.html" rel="alternate" type="text/html" title="Redes, componentes, protocolos e serviços" /><published>2020-10-10T00:00:00-03:00</published><updated>2020-10-10T00:00:00-03:00</updated><id>http://localhost:4000/2020/10/10/Web_fundamentos</id><content type="html" xml:base="http://localhost:4000/2020/10/10/Web_fundamentos.html">&lt;p&gt;&lt;em&gt;Texto base 1 parte 1 - Componentes&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
Olá a todos, sobre esta matéria eu fiz umas anotações, porém meu texto ficou muito grande, e você pode conferir no link ao final da página.&lt;!--more--&gt; Aqui tentarei resumir os parágrafos em até 3 linhas, vamos lá?&lt;br /&gt;&lt;br /&gt;
Começando o autor informa que a internet é a rede que conecta milhões de dispositivos de computação ao redor do mundo, há algum tempo atrás eram em menor quantidade.&lt;br /&gt;&lt;br /&gt;
Os dispositivos conectados tem o nome de &lt;strong&gt;sistemas finais&lt;/strong&gt; e são interligados de diversas formas, como com cabos coaxiais, fios de cobre trançados, etc. Os dispositivos finais enviam pacotes pela rede.&lt;br /&gt;&lt;br /&gt;
Alguns dos dispositivos da rede são os &lt;strong&gt;roteadores&lt;/strong&gt; e &lt;strong&gt;switches&lt;/strong&gt;, os switches são usados em redes de acesso (para por exemplo separar um departamento) e os roteadores geralmente são o nucleo da rede (porta de entrada e saida de dados da sua casa/empresa). Os dados percorrerão a rede por uma &lt;strong&gt;rota&lt;/strong&gt; (ou caminho).&lt;br /&gt;&lt;br /&gt;
No parágrafo seguinte o autor faz uma analogia como que uma empresa envia produtos a um deposito com alguns kliômetros de distancia, que divide os produtos em caminhões (análogos aos pacotes de dados), que percorrerão um caminho (análogos á rota). E que no destino o caminhão é descarregados e os produtos agrupados novamente.&lt;br /&gt;&lt;br /&gt;
Uma breve descrição sobre os ISP’s que são provedores de serviços de internet (residênciais mais famosos no Brasil sao Claro, Vivo, etc). E que estes conectam dispositivos finais, para isto devem estar conectados com outros. Eles são separados por niveis (quanto mais alto o nivel mais rapido são).&lt;br /&gt;&lt;br /&gt;
Breve descrição sobre a IETF (Força Tarefa de Engenharia da Internet), que fazem os documentos padrões sobre os protocolos. Os documentos são chamados RFC (requisição de comentários), esses documentos são solicitados analise e comentários por outras pessoas.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Texto base 1 parte 2 - Serviços&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
Aqui o autor da outra definição da internet, que ela é uma infra estrutura que provê serviços á aplicações. Os serviços são executados em sistemas finais, e aplicações são conhecidas como &lt;strong&gt;aplicações distribuidas&lt;/strong&gt; por trocarem informações. Os serviços e aplicações orientam a internet a realizarem a troca de informações.&lt;br /&gt;&lt;br /&gt;
Os sistemas finais oferecem uma API que é um conjunto de regras que um emissor deve cumprir para enviar a mensagem. E faz uma analogia de que Alice quer enviar uma carta a Bob (que está em outro local), e explica sobre os procedimento ao enviar uma carta, como o endereçamento, selo, enviar aos correios, etc. E que isso ocorre nas redes.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Texto base 1 parte 3 - Protocolos&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
Sobre os protocolos o autor faz a analogia de quando se quer saber as horas na rua, e como ocorre esta conversa para obter a informação, dizemos oi, esperamos resposta, respondido sabemos se a pessoa pode nos atender ou não, podendo pedimos as horas e aguardamos a resposta.E o mesmo ocorre nas redes.&lt;br /&gt;&lt;br /&gt;
Então um protocolo define formato e ordem das mensagens trocadas, bem como ações realizada na transmissão / recebimento de mensagens.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Texto base 1 parte 4 - Protocolos e modelos de serviços&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
O autor faz outra analogia para explicar as camadas de protocolos, e usa os procedimentos de quando vamos fazer uma viagem de avião. Descreve que compramos a passagem, vamos ao balcão da linha aérea, despachamos a mala, acessamos o portão de embarque, embarcamos, decolamos, etc. E o mesmo ocorre nas redes.&lt;br /&gt;&lt;br /&gt;
Cada passo que damos acima é uma camada, e que cada camada realiza um serviço e têem seus próprios procedimentos, e alguns complementam outros. E ainda podemos alterar como funciona um serviço sem afetar a funcionalidade de outros, como o desembarque por sexo (portões diferentes para homens e mulheres).&lt;br /&gt;&lt;br /&gt;
Camadas de aplicação&lt;br /&gt;&lt;br /&gt;
As camadas de aplicação é onde residem as aplicações de rede e seus protocolos, alguns deles são HTTP, FTP, SMTP e outros. E as aplicações trocam mensagens.&lt;br /&gt;&lt;br /&gt;
Camada de transporte&lt;br /&gt;&lt;br /&gt;
Camada de transporte é onde é carregado os dados da aplicação entre os lados cliente e servidores de uma aplicação. Os protocolos são TCP e UDP, o TCP oferece serviços orientados a conexão ás aplicações, estas trocam &lt;strong&gt;segmentos&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;
Camada de rede&lt;br /&gt;&lt;br /&gt;
Camada de rede é responsável por movimentar os pacotes de dados que nesta camada são conhecidos como &lt;strong&gt;datagrama&lt;/strong&gt;. A camada anterior passa o segmento e o endereço de destino, esta provê a entrega. Define os campos do datagrama e como roteadores/sistemas agem nesses campos. Possui somente  o protocolo IP e todos itens da rede devem executa-lo.&lt;br /&gt;&lt;br /&gt;
Camada de enlace&lt;br /&gt;&lt;br /&gt;
A camada de rede roteia os datagramas entre origem e destino, porém depende da camada de enlace de dados. Seus serviços dependem do protocolo usado, alguns são Ethernet, Wi-fi (conjunto de protocolos que começam com IEEE 802), PPP. Seus pacotes são chamados &lt;strong&gt;quadros&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;
Camada Física&lt;br /&gt;&lt;br /&gt;
A camada de enlace movimenta quadros entre os elementos da rede, porém a camada física movimenta os bits dentro de um quadro individualmente. Esta camada depende do enlace e do meio de transmissão (fios de cobre trançados, fibra ótica, etc). Em cada meio de transmissão os bits percorrem o enlace de modo diferente.&lt;br /&gt;&lt;br /&gt;
Modelo OSI&lt;br /&gt;&lt;br /&gt;
Aqui fala que o modelo OSI possui 7 camadas e o modelo padrão da Internet contém 5. E que 5 camadas OSI são equivalentes ás 5 da Internet. Camadas OSI &lt;strong&gt;aplicação, sessão, apresentação, transporte, rede, enlace e física&lt;/strong&gt;, Internet &lt;strong&gt;aplicação, transporte, rede, enlace e físico&lt;/strong&gt;. OSI antigo, Internet atual. Na Internet as duas camadas (sessão e apresentação) estão presentes na de aplicação.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Texto base 1 parte 4 - Encapsulamento&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
A partir do envio os dados passam na pilha de protocolos (OSI ou Internet) de cima para baixo na saida e na chegada ao destino percorre de baixo para cima. Cada ponta do cabo realiza a verificação pertencente. E o autor termina com outra analogia de Alice e Bob, dizendo que para enviar um memorando é realizado o encapsulamento colocando envelopes, e na outra ponta é desencapsulado.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Texto base 2 - Definição de redes&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
Neste texto o autor começa definindo a rede como um conjunto de dois ou mais dispositivos, chamados &lt;strong&gt;nós&lt;/strong&gt; que usam um conjunto de regras, chamados &lt;strong&gt;protocolos&lt;/strong&gt;, em comum para compartilhar recursos (de hardware ou mensagens) entre sí através da rede.&lt;br /&gt;&lt;br /&gt;
Dentre os nós que podem se conectar podemos citar:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Impressoras&lt;/li&gt;
  &lt;li&gt;Repetidores&lt;/li&gt;
  &lt;li&gt;Terminais de computadores&lt;/li&gt;
  &lt;li&gt;Pontes (bridges)&lt;/li&gt;
  &lt;li&gt;Computadores&lt;/li&gt;
  &lt;li&gt;Roteadores&lt;br /&gt;&lt;br /&gt;
Termos e expressões nas redes de computadores serão descritos abaixo:&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Endereçamento&lt;/strong&gt; - É colocar um endereço a cada nó da rede, seria o equivalente a fazer o que as empresas de telefonia fizeram, todos os telefones tem um número próprio.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Meio&lt;/strong&gt; - Ambiente físico para conectar os nós da rede, normalmente algum cabo ou até o ar (pelo wi-fi).&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Protocolos&lt;/strong&gt; - É um conjunto de regras usadas para realizar uma conexão, assim como os humanos tem regras para se comunicar em todos os lugares. Não nos comunicamos em um tribunal como nos comunicamos em uma festa por exemplo. Assim os nós tem protocolos que regem a forma de comunicação, entre eles o SMTP, HTTP, etc.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Roteamento&lt;/strong&gt; - significa determinar qual será o caminho percorrido pelos pacotes de dados. Para fazer o roteamento dos pacotes utilizamos um &lt;strong&gt;roteador&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Classificação de redes pela área ocupada&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Local Area Network&lt;/em&gt;&lt;/strong&gt; - para redes menores de 10 km de raio, usada para conectar casas, prédios, empresas, etc.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Wide Area Network&lt;/em&gt;&lt;/strong&gt; - para redes com áres maiores de 10 km de raio, usada para conectar computadores entre diferentes países, estados ou cidades.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Metropolitan Area Network&lt;/em&gt;&lt;/strong&gt; - para conectar computadores ao longo de uma grande cidade ou região metropolitana. Imagine, uma empresa deseja conectar-se comas filiais na região da cidade.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Personal Area Network&lt;/em&gt;&lt;/strong&gt; - para conectar nós próximos, dispositivos bluetooth criam esta rede.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Global Area Network&lt;/em&gt;&lt;/strong&gt; - para conectar redes de longa distância ao redor do globo. A internet é o exemplo de uma GAN.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Storage Area Network&lt;/em&gt;&lt;/strong&gt; - Esta não sei o porque de ela estar aqui, mas ela é uma rede definida especificamente para armazenar dados.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Classificação de redes pela topologia&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/9/96/NetworkTopologies.png&quot; alt=&quot;Topologias de rede&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Rede ponto a ponto&lt;/strong&gt; - Neste tipo de rede o nó só pode se comunicar com o nó adjacente (ao lado). Suponhamos a rede com os nós A, B e C o nó A só pode se comunicar com o nó B, então para se comunicar com C fala primeiro com B. Na figura acima a rede em barramento (Bus) é a unica que não a representa.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Rede estrela&lt;/strong&gt; - Neste tipo de rede todos os nós se conectam a um nó adjacente central. Os nós na extremidade não se conectam entre si, somente com o núcleo (geralmente um Hub). Na imagem acima a terceira rede da primeira linha a representa (star)&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Rede em laço&lt;/strong&gt; - Neste tipo de rede todos nós se conectam entre sí, um exemplo dela é a em anel (ring) e a totalmente conectada (fully connected). Na em anel, se um cabo se romper a rede não é danificada, pois os dados trafegam nos dois sentidos (horário e antihorário). Na completamente conectada se um cabo se romper elas se comunicarão por outra rota.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Rede em árvore&lt;/strong&gt; - Neste tipo de rede os nós estão dispostos em uma forma hierárquica, o nó principal conecta os de nível abaixo, e por assim vai na rede. Na figura a segunda topologia da segunda linha a representa (tree).&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Redes de difusão&lt;/em&gt;&lt;/strong&gt; - Neste tipo de rede sempre que uma máquina envia uma mensagem, ela (a mensagem) se propaga por toda a rede de forma que todos os nós a escutem, não sei quanto á segurança nessas redes, mas os nós irão analisar da seguinte forma: Esta mensagem é pra mim? Sim, recebe a mensagem. Não, continuo o trabalho e ignoro a mensagem. Uma vantagem é que podemos classificar as mensagens em 3 tipos: Mensagens destinadas a um unico nó (provavelmente aplicam algum nivel de segurança), mensagens destinadas a uma quantidade de nós específicos e mensagens destinadas a todos os nós.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Redes em barramento&lt;/strong&gt; - este tipo de rede tem as características da rede de difusão (todos os nós irão ouvir a mensagem). Na figura a ultima topologia a representa (Bus).&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Rede via satélite&lt;/strong&gt; - Neste tipo de rede é colocado um satélite na órbita da terra para transmitir as mensagens. Este tipo de rede também é uma rede de difusão. E não há uma topologia na figura para a representar.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.notion.so/Web-semana-1-0c23a8849df045ddaf1c300f01a99881&quot;&gt;Link texto completo&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="faculdade" /><summary type="html">Texto base 1 parte 1 - Componentes Olá a todos, sobre esta matéria eu fiz umas anotações, porém meu texto ficou muito grande, e você pode conferir no link ao final da página.</summary></entry><entry><title type="html">Python, memória e arquivos</title><link href="http://localhost:4000/2020/10/07/python_memoria_e_arquivos.html" rel="alternate" type="text/html" title="Python, memória e arquivos" /><published>2020-10-07T00:00:00-03:00</published><updated>2020-10-07T00:00:00-03:00</updated><id>http://localhost:4000/2020/10/07/python_memoria_e_arquivos</id><content type="html" xml:base="http://localhost:4000/2020/10/07/python_memoria_e_arquivos.html">&lt;p&gt;&lt;em&gt;Texto base 1 parte 1 - Memória&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
O texto trata sobre tipos mutáveis e imutáveis na linguagem Python. E que todos os tipos numéricos; como bool, interface, float e complex; são imutáveis.&lt;!--more--&gt;&lt;br /&gt;&lt;br /&gt;
As atribuições em python funcionam da seguinte forma, ao fazer &lt;strong&gt;A=5&lt;/strong&gt; o python cria a variável e um objeto int e armazena na memória o valor 5, isto se chama ponteiro pois a variavel &lt;strong&gt;A&lt;/strong&gt; aponta ao valor &lt;strong&gt;5&lt;/strong&gt;. E se você atribuir outro valor á variável A por exemplo &lt;strong&gt;A=10&lt;/strong&gt; o python esquece, ou melhor, perde o ponteiro ao valor &lt;strong&gt;5&lt;/strong&gt; e aponta ao novo valor &lt;strong&gt;10&lt;/strong&gt;, ao perder o ponteiro não podemos mais acessar o valor (mas podemos criar outro).&lt;br /&gt;&lt;br /&gt;
O mesmo não ocorre a uma lista, pois podemos fazer o seguinte &lt;strong&gt;lista=[2,3,6]&lt;/strong&gt; como dito anteriormente a linguagem cria a variável e cria a lista na memória, e ainda aponta a variável ao endereço da memória. Ao fazermos o seguinte &lt;strong&gt;lista[1]=4&lt;/strong&gt; a linguagem não cria outro objeto então o endereço é o mesmo. Então a lista é mutável.&lt;br /&gt;&lt;br /&gt;
O autor ainda brinca da seguinte forma: e quanto ao objeto str (string), tecnicamente ela é uma lista de caracteres, tanto é que podemos acessar um item fazendo assim: &lt;strong&gt;umaString=”acaba”&lt;/strong&gt; e ainda &lt;strong&gt;print(umaString[0])&lt;/strong&gt;. O autor fala que irá ver e executa algo parecido porém deu erro. E conclui que Strings também são &lt;strong&gt;imutáveis&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;
Sobre a mutabilidade, o autor da o exemplo com listas fazendo da seguinte forma:&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;listA=[2,4,6]&lt;br /&gt;
listB=listA&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
O que fizemos acima foi criar a variavel listA e apontamos ao valor &lt;strong&gt;[2,4,6]&lt;/strong&gt; e na linha abaixo atribuimos a mesma lista a &lt;strong&gt;listB&lt;/strong&gt;. Em seguida fez a seguinte atribuição: &lt;strong&gt;listB[2]=8&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
Na atribuição acima, o indice dois da lista será alterada nas duas variáveis, pois as duas apontam ao mesmo objeto. E se fizermoso codigo abaixo obteremos o mesmo valor.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;print(listA)&lt;br /&gt;
print(ListB)&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Swap&lt;/strong&gt; - o python com atribuições mutiplas permite fazer a troca de objetos entre variaveis, para fazer isto precisariamos de mais uma variavel, fariamos da seguinte forma:&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;a=3&lt;br /&gt;
b=4&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
Essas são as variaveis e se quisessemos trocalas fariamos assim:&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;temp=a&lt;br /&gt;
a=b&lt;br /&gt;
b=temp&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
E com a atribuição multipla fariamos da seguinte forma:&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;a, b = b, a&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
Embora que não vejo uma aplicação, com a atribuição multipla economiza memória descartando a variavel temp.&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;Texto base 1 parte 2 - Arquivos&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
No texto o autor da uma breve informação sobre arquivos, e sobre o sistema de arquivos, que eles são feitos para organizar nossos arquivos e que o sistema de arquivos contem pastas (chamados diretórios) onde colocamos nossos arquivos.&lt;br /&gt;&lt;br /&gt;
O topo da hierarquia do sistema de arquivos. onde o topo é denominado diretório raiz e com uma razão, o topo é o inicio da raiz, e os niveis abaixo são raizes “filhas”. E que o diretório raiz varia de acordo com o sistema operacional.&lt;br /&gt;&lt;br /&gt;
Cada arquivo no sistema pode ser referenciado com um caminho, e este caminho pode ser absoluto, no qual deve ser especificado todo os diretórios incluindo o raiz, no linux um arquivo de texto na pasta Documents do usuario é feito da seguinte forma:&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;/users/rodrigo/Documents/arquivo.txt&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
O caminho também pode ser relativo, onde partimos do diretório atual. Portanto se estivessemos no diretorio Documents (citado acima) e quisessemos usar um arquivo no diretorio /users/shared teriamos que fazer da seguinte forma:&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;../../shared/outroArquivo.txt&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
Cada &lt;strong&gt;../&lt;/strong&gt; se refere ao diretório pai do diretorio atual, então o diretorio pai do Documents é rodrigo, o diretorio pai do diretorio rodrigo é users ai acessamos a outra pasta e o arquivo.&lt;br /&gt;&lt;br /&gt;
Sobre a leitura de arquivos, o python tem o método &lt;strong&gt;open(‘nomeArquivo.txt’, ‘r’)&lt;/strong&gt; que retorna um objeto do tipo &lt;strong&gt;Fluxo de Entrada ou Saída&lt;/strong&gt; e que esse objeto é chamado pelos programadores como &lt;strong&gt;objeto de arquivo&lt;/strong&gt;. Os parâmetros do método open() são o nome do arquivo (um objeto do tipo str) e o modo de abertura (outro objeto str) que podem ser &lt;strong&gt;r&lt;/strong&gt; = leitura, &lt;strong&gt;w&lt;/strong&gt;=escrita, &lt;strong&gt;a&lt;/strong&gt; = acrescimo (ou em ingles &lt;strong&gt;append&lt;/strong&gt;) este método adiciona um novo conteudo ao final do arquivo.&lt;br /&gt;&lt;br /&gt;
Alguns metodos de arquivos são arquivoEntrada.read() le o arquivo inteiro, arquivoEntrada.read(n) onde n é a quantidade de caracteres a serem lidos, arquivoEntrada.readline() lê uma linha inteira, arquivoEntrada.readlines() le o arquivo inteiro e retorna uma lista de linhas do arquivo, arquivoEntrada.write(s) escreve a string s no arquivo, e arquivoEntrada.close() fecha o arquivo.&lt;br /&gt;&lt;br /&gt;
E ao ler um arquivo o python cria um cursor que aponta a um caractere do arquivo, ao abrir um arquivo com o texto abaixo o cursor apontará ao primeiro caractere. Então o cursor receberá o caractere &lt;strong&gt;E&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Este arquivo tem 3 linhas.&lt;br /&gt;
&lt;br /&gt;
A linha acima está em branco.&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
Se fizermos &lt;strong&gt;arquivo.read(5)&lt;/strong&gt; ele lerá os 5 primeiros caracteres e apontará ao proximo caractere, entao o cursor receberá o caractere &lt;strong&gt;a&lt;/strong&gt;. E se apos o &lt;strong&gt;read(5)&lt;/strong&gt; fizermos o &lt;strong&gt;readline()&lt;/strong&gt; o python lerá o restante da linha entao retorna &lt;strong&gt;rquivo tem 3 linhas.\n&lt;/strong&gt;. E assim funciona, ele le os caracteres e o cursor aponta ao proximo caractere.&lt;br /&gt;&lt;br /&gt;
E o autor mostra como usálos, fazendo exemplos práticos como o read() que é util para ler o arquivo todo e substituir uma substring a uma outra string, contar quantos caracteres o arquivo possui, etc.&lt;br /&gt;&lt;br /&gt;
O readlines() é util para ler uma linha inteira, usado para por exemplo analisar um log de um servidor.  que este método é melhor para arquivos grandes pois não temos o arquivo inteiro na memória.&lt;br /&gt;&lt;br /&gt;
A seguir o autor mostra como ocorre a gravação em um arquivo. E que para abrir o arquivo para gravação devemos usar &lt;strong&gt;open(‘nomeArquivo.txt’,’w’)&lt;/strong&gt; e que deste modo se o arquivo não existir o python o criará. E abrindo com o &lt;strong&gt;w&lt;/strong&gt; (do segundo parametro) temos a função &lt;strong&gt;write()&lt;/strong&gt; para gravar dados e começará na posição do cursor e retorna a quantidade de caracteres escrito, se quiser escrever novamente o cursor estará no final da string escrita anteriormente… E ainda que se quisermos escrever algo diferente de string devemos converter para string antes de escrevermos com o str().&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;Texto base 2 - Revisão de algoritmos&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
O segundo texto base desta semana fala sobre algorítmos, que eles são um conjunto de passos bem definidos que tem como objetivo solucionar algum problema computacional ou não. Deu exemplos de algoritmos não computacionais (como fazer um sorvete) e computacionais como o algoritmo de euclides para obtenção do mdc de dois numeros. E ainda que os algoritmos tem valores de entrada e valores de saida. Um algoritmo deve ser coerente com as entradas, finito, correto, e com passos que possam ser entendidos pelo usuários.&lt;br /&gt;&lt;br /&gt;
E que os algoritmos podem ser escritos / descritos em modo texto (com uma linguagem e semantica) ou de modo gráfico (como fluxogramas que também tem uma semantica de simbolos usados). Os elementos gráficos de um fluxogramas são conectados por setas que indicam o caminho a ser percorrido pelo algoritmo. E o texto continua, só não estou com paciência de continuar.&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;Texto base 3 - Arquivos&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
Este texto base, também não o li todo, mas pelo visto trata da parte dois do texto base 1 porém mais detalhado. Como a codificação ASCII, UTF-8, etc. E ao contrário do primeiro ele começa explicando pela escrita de arquivos (provavelmente por ter somente um método referente, o arquivo.write()). E sobre a abertura de arquivos em python com o metodo open(), ele diz ainda que há outros parâmetros neste método, como descreve abaixo:&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;open(arquivo, modo=’r’, buffering=-1, encoding=None, errors=None, newline=None, closefd=true, opener=none)&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
E explica cada um parametro, onde file é o arquivo a ser aberto, o mode que são os modos de leitura-escrita-ambos-adição, sobre o buffering é a bufferização do arquivo com as opções 0 (não usa buffer) - 1 (só se usa em arquivos texto e o buffer terá uma linha do arquivo - &amp;gt;1 o inteiro indica o tamanho do buffer - e se não for especificado adotará o valor -1 que é o metodo padrão de buffer, o encode se trata das codificações como “ansi” e “utf-8”. Os outros parametros não serão abordados no livro. E mostra os metodos para arquivos, como close(), flush() este método descarrega o buffer do arquivo aberto para a gravação do mesmo sem fechar, read() readline() readlines() write(s) já abordados anteriormente, writelines(lista) que grava todos os itens da lista no arquivo, e seek(int) que leva o cursor na posição int de caracteres do arquivo.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://rregio-top.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name></name></author><category term="faculdade" /><category term="python" /><summary type="html">Texto base 1 parte 1 - Memória O texto trata sobre tipos mutáveis e imutáveis na linguagem Python. E que todos os tipos numéricos; como bool, interface, float e complex; são imutáveis.</summary></entry><entry><title type="html">AsyncTask e Android</title><link href="http://localhost:4000/2020/10/06/AsyncTask-em-Android.html" rel="alternate" type="text/html" title="AsyncTask e Android" /><published>2020-10-06T00:00:00-03:00</published><updated>2020-10-06T00:00:00-03:00</updated><id>http://localhost:4000/2020/10/06/AsyncTask%20em%20Android</id><content type="html" xml:base="http://localhost:4000/2020/10/06/AsyncTask-em-Android.html">&lt;p&gt;O curso abordou sobre AsyncTask que pelo que entendi do curso, o &lt;strong&gt;AsyncTask&lt;/strong&gt; executa&lt;!--more--&gt; procedimentos assincronos, ou seja, que rodam em background. Para processamentos assincronos não podemos executar na thread da UI (User Interface), então criamos esse AsyncTask que cria uma Thread que espera o resultado do acesso. Para testar meus entendimentos Criei um aplicativo que usa a api &lt;a href=&quot;https://genderize.io&quot;&gt;Genderize.IO&lt;/a&gt; (ela responde se um ou mais nomes são do sexo masculino ou feminino). Neste post não colocarei muito código, para ver o código acesse o projeto no github &lt;a href=&quot;https://github.com/rodrigoregio/NameAPIs&quot;&gt;Projeto&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Para acessar API’s primeiramente devemos adicionar permissão para HttpUrlConnection no AndroidManifest.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;android.permission.INTENET&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
O aplicativo pega nomes digitados (separados por virgula) em um TextView e também há um botão (ao digitar os nomes o usuario clica no botão). Ao clicar no botão é chamado a função verificaNomes, ela pega os nomes digitados pelo usuário e quebra (split) separando por virgula, exemplo, “Rodrigo,José” se tornará um array de Strings que nomeei nomesList e terá os valores [“Rodrigo”, “José”]. Se a nomesList tiver um nome somente ele acessará a url &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;https://api.genderize.io?name=&quot;+nomesList[0]&lt;/code&gt;, e se tiver mais de um nome acessará com um for que ficará da seguinte forma:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stringBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;api.genderize.io/?&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nomesList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;name=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
O aplicativo funcionará somente online, então fiz uma função para saber se o usuario está online. Se o usuario estiver online chamará uma função chamada buscaDados.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Antes da função buscaDados explicarei sobre a AsyncTask (até porque a buscaDados chamará a AsyncTask. Em nossa classe MainActivity mesmo criamos a classe MyTask que extende a AsyncTask, para extender devemos extender da seguinte forma extends &lt;strong&gt;AsyncTask&amp;lt;String,String,String&amp;gt;&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Não tinha entendido o porque da tag &lt;strong&gt;&amp;lt;String,String,String&amp;gt;&lt;/strong&gt;, mas pesquisando mais sobre ela, encontrei que ela recebe tipo três “parâmetros”. O primeiro String é um parâmetro (que usamos para passar a url onde ela pega os dados. O segundo String é o progresso (pode-se substituir o String por um int e exibirá a porcentagem do procedimento como quando fazemos um download. E o terceiro String é o resultado, o que ele pegou.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Fazendo isto nós teremos que sobrescrever ao menos um método, o &lt;strong&gt;doInBackground()&lt;/strong&gt;. Nele criamos uma String que receberá o conteúdo da api. Criamos uma classe chamada &lt;strong&gt;HttpManager&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Essa HttpManager é o que realiza a conexão, criamos um metodo chamado &lt;strong&gt;getDados(String uri)&lt;/strong&gt; que tem como parametro a url, e ela trabalha como uma conexão com banco de dados. Criamos uma URL com a uri que passamos como argumento. Criamos uma conexão com HttpUrlConnection abrimos a url fazendo um casting para o HttpUrlConnection. Como disse anteriormente ela trabalha como um banco de dados, para mais detalhes acesse o projeto no Github &lt;a href=&quot;https://github.com/rodrigoregio/NameAPIs/blob/master/app/src/main/java/top/rregio/nameapis/HttpManager.java&quot;&gt;classe HttpManager&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Após retornar ao doInBackground retornamos a string conseguida na api. Na classe do AsyncTask também sobrescrevi outros dois métodos o &lt;strong&gt;onPreExecute&lt;/strong&gt; (nele coloquei para que mostre somente um progressbar (item com a animação de que está carregando) e outro chamado &lt;strong&gt;onPostExecute&lt;/strong&gt; (fiz com que ele desabilite a animação do progressbar e chame um metodo chamado atualizarView(String s) este método somente coloca a string retornada no doInBackground em um TextView.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;E por enquanto é somente estes passos que meu aplicativo faz, e é isto que entendi o sobre acesso a API’s com Android.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://rregio-top.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name></name></author><category term="Android" /><summary type="html">O curso abordou sobre AsyncTask que pelo que entendi do curso, o AsyncTask executa</summary></entry><entry><title type="html">Testando post</title><link href="http://localhost:4000/2020/10/03/Testando_post.html" rel="alternate" type="text/html" title="Testando post" /><published>2020-10-03T00:00:00-03:00</published><updated>2020-10-03T00:00:00-03:00</updated><id>http://localhost:4000/2020/10/03/Testando_post</id><content type="html" xml:base="http://localhost:4000/2020/10/03/Testando_post.html">&lt;p&gt;Olá, este é somente um post de teste que estou fazendo para verificar se está ok&lt;!--more--&gt; E aparentemente está tudo bem, porém ainda falta estilizar a página do blog, pois não quero que a fique assim. E ainda faltam algumas estilizações / edições nos textos das páginas.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Como informado, já irei pegar um curso no site Treinaweb e fazer e daqui um ou dois dias postarei algo no blog comentando sobre o que entendi do curso.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Obrigado por tudo Jekyll.&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="teste" /><category term="web" /><summary type="html">Olá, este é somente um post de teste que estou fazendo para verificar se está ok</summary></entry><entry><title type="html">Iniciando com Jekyll</title><link href="http://localhost:4000/2020/09/25/IniciandocomJekyll.html" rel="alternate" type="text/html" title="Iniciando com Jekyll" /><published>2020-09-25T00:00:00-03:00</published><updated>2020-09-25T00:00:00-03:00</updated><id>http://localhost:4000/2020/09/25/IniciandocomJekyll</id><content type="html" xml:base="http://localhost:4000/2020/09/25/IniciandocomJekyll.html">&lt;p&gt;Olá Mundo, Google e pessoal. Este é para ser o primeiro post de meu blog que estou criando&lt;!--more--&gt;, onde nele explicarei o porque, pra que e como estou criando isto. Primeiramente o porque?&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Estou criando este blog porque recentemente estou ouvindo muitos canais de programadores dizendo que é importante saber como escrever algo onde você documenta toda a sua experiência sobre uma determinada tecnologia pois isto te ajuda a organizar o processamento do que se está falando. E com certa razão quem consegue explicar algo em um texto consegue explicar isto também em audio, video ou qualquer outra forma.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Então estou fazendo este blog para poder organizar melhor o meu entendimento sobre um determinado assunto que estou estudando naquele dia. Mesmo que este conhecimento seja vago, e ou que ninguém nunca leia estes posts quero criar isto para tentar organizar minhas ideias, entendimentos tentando explicar.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;E por fim como farei este blog. Bom, para iniciar tentarei fazer ele com um criador de sites estáticos chamado Jekyll, e procurarei estudar sobre o mesmo nesses dias iniciais, o que sei sobre ele é que ele utiliza Ruby e que com ele podemos criar páginas e hospedar onde quisermos pois ele não utiliza nenhuma linguagem de programação avançada (como php, jsp, python, etc) e também não dá pra fazer conexões com banco de dados. Também sei que ele utiliza também linguagem markdown, a que o github utiliza no arquivo Readme dos repositórios, a linguagem de markdown é como um html simplificado, pelo menos dizia no tutorial do Guanabara do Curso em Vídeo, onde ele ensina Git e GitHub com GitHub Desktop no link abaixo.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/LntSB-gl-ZI&quot;&gt;https://youtu.be/LntSB-gl-ZI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Estou usando o Notion para escrever este post, tentei exportar ele para arquivo md, porém como os arquivos contém partes que são processadas pelo jekyll ele ficou inconsistente e dificil de manter, então como primeiro post vou colocar o link dele abaixo e o resto será aqui neste blog mesmo. (ainda procurarei configura-lo, mas enquanto isso…).&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.notion.so/Iniciando-com-Jekyll-48f0e5aefc2e4d309b208f64c3529bdd&quot;&gt;Post notion&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://rregio-top.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name></name></author><category term="web" /><category term="jekyll" /><summary type="html">Olá Mundo, Google e pessoal. Este é para ser o primeiro post de meu blog que estou criando</summary></entry></feed>